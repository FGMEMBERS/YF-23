<?xml version="1.0"?>
<!--
************************************************************************
NR/MD YF23 simulation config.

2003-08-25 Lee Elliott  leee-fgfs@spatial.freeserve.co.uk
************************************************************************
-->

<PropertyList>
 <sim>
  <flight-model>yasim</flight-model>
  <aero>YF-23-yasim</aero>
  <author>Lee Elliott</author>
  <fuel-fraction>1.0</fuel-fraction>

  <description>Northrop/McDonnell Douglas YF-23 ATF prototype</description>

  <virtual-cockpit archive="y">true</virtual-cockpit>

  <view n="0">
   <internal archive="y">true</internal>
   <config>
    <x-offset-m archive="y">0.00</x-offset-m>
    <y-offset-m archive="y">1.10</y-offset-m>
    <z-offset-m archive="y">-5.80</z-offset-m>
    <pitch-offset-deg>0</pitch-offset-deg>
    <default-field-of-view-deg>55</default-field-of-view-deg>
   </config>
  </view>

  <current-view>
   <field-of-view>55.0</field-of-view>
  </current-view>

  <sound>
   <path>Aircraft/YF-23/Sounds/YF-23-sound.xml</path>
  </sound>

  <panel>
   <path>Aircraft/YF-23/Panels/YF-23-vfr-panel.xml</path>
  </panel>
  <panel_2>
   <path>Aircraft/YF-23/Panels/YF-23-mini-panel.xml</path>
  </panel_2>

  <hud>
   <path>Aircraft/YF-23/Huds/YF-23-hud1.xml</path>
   <visibility>true</visibility>
  </hud>

  <model>
   <path>Aircraft/YF-23/Models/YF-23-model.xml</path>
  </model>

  <systems>
    <autopilot>
      <path>Aircraft/YF-23/Systems/YF-23-autopilot.xml</path>
    </autopilot>
   <electrical>
    <path>Aircraft/YF-23/Systems/YF-23-electrical.xml</path>
   </electrical>
  </systems>

  <chase-distance-m type="double" archive="y">-30.0</chase-distance-m>

<!-- Flap settings -->
  <flaps>
   <setting>0.00</setting>
   <setting>0.08</setting>
   <setting>0.16</setting>
   <setting>0.32</setting>
   <setting>0.48</setting>
   <setting>0.64</setting>
   <setting>0.82</setting>
   <setting>1.00</setting>
  </flaps>

 </sim>

 <input>
  <keyboard>

   <key n="100">
    <name>d</name>
    <desc>Retract Slats.</desc>
    <binding>
     <command>property-adjust</command>
     <property>/controls/flight/slats</property>
     <step type="double">-0.25</step>
    </binding>
   </key>

   <key n="102">
    <name>f</name>
    <desc>Extend Slats.</desc>
    <binding>
     <command>property-adjust</command>
     <property>/controls/flight/slats</property>
     <step type="double">0.25</step>
    </binding>
   </key>

  </keyboard>
 </input>

 <autopilot>
   <settings>
    <target-agl-ft type="float">800</target-agl-ft>
    <target-altitude-ft type="float">3000</target-altitude-ft>
    <target-aoa-deg type="float">11</target-aoa-deg>
    <target-pitch-deg type="float">12</target-pitch-deg>]
    <take-off-pitch-deg type="float">14</take-off-pitch-deg>
    <ground-roll-heading-deg type="float">-999.9</ground-roll-heading-deg>
    <target-speed-kt type="float">400.0</target-speed-kt>
    <target-mach type="float">0.7</target-mach>
    <target-approach-AoA-deg type="float">9.0</target-approach-AoA-deg>
   </settings>
 </autopilot>

<!-- Start with the Parking Brake on -->
 <controls>
  <gear>
   <brake-parking type="double">1.0</brake-parking>
  </gear>
 </controls>

<!-- Engine indexes -->
 <engines>
  <engine n="0">
   <engine-num type="int">0</engine-num>
  </engine>
  <engine n="1">
   <engine-num type="int">1</engine-num>
  </engine>
 </engines>

<!-- Fuel Tank indexes -->
 <consumables>
  <fuel>
   <tank n="0">
    <tank-num type="int">0</tank-num>
   </tank>
   <tank n="1">
    <tank-num type="int">1</tank-num>
   </tank>
   <tank n="2">
    <tank-num type="int">2</tank-num>
   </tank>
  </fuel>
 </consumables>

 <nasal>
  <YF23>
   <script><![CDATA[
    checkagl = func {
      # Check that the AP modes have not been switched off...
      if(getprop("/autopilot/locks/altitude") != "Off") {
       agl = getprop("/position/altitude-agl-ft");
       # Depending on alt...
       # Glide Slope Phase
       if(agl > 70) {
        setprop("/autopilot/locks/altitude", "Glide Slope");
        kias = getprop("/velocities/airspeed-kt");
        vfps = getprop("/velocities/vertical-speed-fps");
        if(kias < 170) {
         interpolate("/controls/flight/flaps", 1.0, 2);
#         setprop("/autopilot/locks/speed", "AoA-by-speed");
        } else {
         if(kias < 180) {
          interpolate("/controls/flight/flaps", 0.82, 2);
          setprop("/controls/gear/gear-down", "true");
         } else {
          if(kias < 190) {
           interpolate("/controls/flight/flaps", 0.64, 2);
          } else {
           if(kias < 200) {
            interpolate("/controls/flight/flaps", 0.48, 2);
           } else {
            if(kias < 210) {
             interpolate("/controls/flight/flaps", 0.32, 2);
             interpolate("/controls/flight/spoilers", 0, 2);
            } else {
             if(kias < 220) {
              interpolate("/controls/flight/flaps", 0.16, 2);
             } else {
              if(kias < 230) {
               interpolate("/controls/flight/flaps", 0.08, 2);
              } else {
               if(vfps < -15) {
                setprop("/autopilot/settings/target-speed-kt", 140);
                interpolate("/controls/flight/spoilers", 0.6, 2);
               }
              }
             }
            }
           }
          }
         }
        }
       } else {
        # Touch Down Phase
        setprop("/autopilot/locks/altitude", "Touch Down");
       }
       if(agl < 0.1) {
        # Disable the AP nav1 heading hold, deploy the spoilers and cut the
        # throttles.
        setprop("/autopilot/locks/heading", "Off");
        setprop("/controls/flight/spoilers", 1);
        setprop("/autopilot/locks/speed", "Off");
        setprop("/controls/engines/engine[0]/throttle", 0);
        setprop("/controls/engines/engine[1]/throttle", 0);
       }
       if(agl < 0.01) {
        # Brakes on, Rudder heading hold on & disable IL mode.
        setprop("/controls/gear/brake-left", 0.4);
        setprop("/controls/gear/brake-left", 0.4);
        hdgdeg = getprop("/orientation/heading-deg");
        setprop("/autopilot/settings/ground-roll-heading-deg", hdgdeg);
        setprop("/autopilot/locks/heading", "ground-roll");
        setprop("/autopilot/locks/altitude", "Off");
        interpolate("/controls/flight/elevator-trim", 0, 6.0);
       }
       # Re-schedule the next call
       settimer(checkagl, 0.5);
      }
    }
    takeoff = func {
      # Check that the AP modes have not been switched off...
      if(getprop("/autopilot/locks/altitude") != "Off") {

       # Get the airspeed & agl.
       airspeed = getprop("/velocities/airspeed-kt");
       agl = getprop("/position/altitude-agl-ft");

       # Start-up - Set the heading, deploy the flaps, set 0.5 throttle
       # and rudder hold.
       if(getprop("/autopilot/settings/ground-roll-heading-deg") < -999) {
        hdgdeg = getprop("/orientation/heading-deg");
        setprop("/autopilot/settings/ground-roll-heading-deg", hdgdeg);
        setprop("/autopilot/settings/true-heading-deg", hdgdeg);
        setprop("/controls/flight/flaps", 0.64);
        setprop("/autopilot/locks/speed", "speed-with-throttle");
        setprop("/autopilot/locks/heading", "ground-roll");
       }
       # Retract the U/C & switch to roll controlled steering once above 50ft agl
       if(agl > 50) {
        setprop("/controls/gear/gear-down", "false");
        setprop("/autopilot/locks/heading", "true-heading-hold");
        interpolate("/controls/flight/rudder", 0, 5.0);
       }
       # Set mode depending on speed.
       if(airspeed < 80) {
        setprop("/autopilot/locks/altitude", "ground-roll");  # does nothing.
       } else {
        setprop("/autopilot/locks/altitude", "take-off"); # Engage T-O pitch hold.
        if(airspeed < 160) {
         setprop("/controls/flight/flaps", 0.64);
        } else {
         if(airspeed < 170) {
          setprop("/controls/flight/flaps", 0.48);
         } else {
          if(airspeed < 180) {
           setprop("/controls/flight/flaps", 0.32);
          } else {
           if(airspeed < 190) {
            setprop("/controls/flight/flaps", 0.16);
           } else {
            if(airspeed < 200) {
             setprop("/controls/flight/flaps", 0.08);
            } else {
             setprop("/controls/flight/flaps", 0);
             setprop("/autopilot/locks/speed", "speed-with-throttle");
             setprop("/autopilot/locks/altitude", "Off");
             settimer(takeoffterm, 1.0);
            }
           }
          }
         }
        }
       }
       # Re-schedule the next call
       settimer(takeoff, 0.5);
      }
    }
    takeoffterm = func {
      # Set MC modes & reset ground-roll-heading-deg
      setprop("/autopilot/locks/speed", "mach-with-throttle");
      setprop("/autopilot/locks/altitude", "mach-climb");
      setprop("/autopilot/settings/ground-roll-heading-deg", -999.9);
    }
   ]]></script>
  </YF23>

 </nasal>

</PropertyList>
