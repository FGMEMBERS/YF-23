<?xml version="1.0"?>
<!--
************************************************************************
NR/MD YF23 simulation config.

2003-08-25 Lee Elliott
************************************************************************
-->

<PropertyList>
 <sim>
  <flight-model>yasim</flight-model>
  <status>beta</status>
  <author>Lee Elliott</author>
  <aero>YF-23-yasim</aero>
  <fuel-fraction>1.0</fuel-fraction>

  <description>Northrop/McDonnell Douglas YF-23 ATF prototype (YASim FDM)</description>

  <virtual-cockpit archive="y">false</virtual-cockpit>

  <view n="0">
   <internal archive="y">false</internal>
   <config>
    <x-offset-m archive="y">0.00</x-offset-m>
    <y-offset-m archive="y">1.10</y-offset-m>
    <z-offset-m archive="y">-5.80</z-offset-m>
    <pitch-offset-deg>0</pitch-offset-deg>
    <default-field-of-view-deg>55</default-field-of-view-deg>
   </config>
  </view>

  <current-view>
   <field-of-view>55.0</field-of-view>
  </current-view>

  <sound>
   <path>Aircraft/YF-23/Sounds/YF-23-sound.xml</path>
  </sound>

  <panel>
   <path>Aircraft/YF-23/Panels/YF-23-vfr-panel.xml</path>
  </panel>
  <panel_2>
   <path>Aircraft/YF-23/Panels/YF-23-mini-panel.xml</path>
  </panel_2>

  <hud>
   <path n="1">Huds/NTPS.xml</path>
   <visibility>true</visibility>
   <color>
    <transparent type="bool">true</transparent>
    <antialiased type="bool">true</antialiased>
    <brightness type="float">0.85</brightness>
    <alpha type="float">0.85</alpha>
   </color>
   <palette>
    <color n="0">
     <red type="float">0.38</red>
     <green type="float">1.0</green>
     <blue type="float">0.22</blue>
    </color>
    <color n="1">
     <red type="float">1.0</red>
     <green type="float">0.0</green>
     <blue type="float">0.0</blue>
    </color>
   </palette>

  </hud>

  <model>
   <path>Aircraft/YF-23/Models/YF-23-model.xml</path>
  </model>

  <systems>
    <autopilot>
      <path>Aircraft/YF-23/Systems/YF-23-autopilot.xml</path>
    </autopilot>
   <electrical>
    <path>Aircraft/YF-23/Systems/YF-23-electrical.xml</path>
   </electrical>
  </systems>

  <chase-distance-m type="double" archive="y">-30.0</chase-distance-m>

<!-- Flap settings -->
  <flaps>
   <setting>0.00</setting>
   <setting>0.08</setting>
   <setting>0.16</setting>
   <setting>0.32</setting>
   <setting>0.48</setting>
   <setting>0.64</setting>
   <setting>0.82</setting>
   <setting>1.00</setting>
  </flaps>

  <help>
   <title>YF-23</title>
   <key>
    <name>d/f</name>
    <desc>retract/extend slats</desc>
   </key>
   <key>
    <name>j/k</name>
    <desc>decrease/increase spoilers</desc>
   </key>
  </help>

  <menubar>
   <default>
    <menu n="99">
     <label>NTPS</label>
     <enabled>true</enabled>
     <item>
      <label>Select Target Task</label>
      <enabled>true</enabled>
      <binding>
       <command>nasal</command>
       <script>lead_target.select_task_dialog()</script>
      </binding>
     </item>
     <item>
      <label>Reset Target Aircraft</label>
      <enabled>true</enabled>
      <binding>
       <command>nasal</command>
       <script>lead_target.reset_target_aircraft()</script>
      </binding>
     </item>
    </menu>
   </default>
  </menubar>
 </sim>

 <input>
  <keyboard>

   <key n="100">
    <name>d</name>
    <desc>Retract Slats.</desc>
    <binding>
     <command>property-adjust</command>
     <property>/controls/flight/slats</property>
     <step type="double">-0.25</step>
    </binding>
   </key>

   <key n="102">
    <name>f</name>
    <desc>Extend Slats.</desc>
    <binding>
     <command>property-adjust</command>
     <property>/controls/flight/slats</property>
     <step type="double">0.25</step>
    </binding>
   </key>

  </keyboard>
 </input>

 <autopilot>
   <lead-target>
     <!-- enable the lead target control script by default for NTPS -->
     <enable type="bool">true</enable>
   </lead-target>

   <settings>
    <target-agl-ft type="float">800</target-agl-ft>
    <target-altitude-ft type="float">3000</target-altitude-ft>
    <target-aoa-deg type="float">11</target-aoa-deg>
    <target-pitch-deg type="float">12</target-pitch-deg>]
    <take-off-pitch-deg type="float">13</take-off-pitch-deg>
    <initial-climb-pitch-deg type="float">11</initial-climb-pitch-deg>
    <ground-roll-heading-deg type="float">-999.9</ground-roll-heading-deg>
    <target-speed-kt type="float">400.0</target-speed-kt>
    <target-mach type="float">0.7</target-mach>
    <target-approach-AoA-deg type="float">9.0</target-approach-AoA-deg>
   </settings>

   <locks>
    <auto-take-off type="string">Enabled</auto-take-off>
    <auto-landing type="string">Enabled</auto-landing>
    <rudder-control type="string">Initialised</rudder-control>
    <approach-AoA-lock type="string">Initialised</approach-AoA-lock>
   </locks>

 </autopilot>

<!-- Start with the Parking Brake on -->
 <controls>
  <gear>
   <brake-parking type="double">1.0</brake-parking>
  </gear>
 </controls>

<!-- Engine indexes -->
 <engines>
  <engine n="0">
   <engine-num type="int">0</engine-num>
  </engine>
  <engine n="1">
   <engine-num type="int">1</engine-num>
  </engine>
 </engines>

<!-- Fuel Tank indexes -->
 <consumables>
  <fuel>
   <tank n="0">
    <tank-num type="int">0</tank-num>
   </tank>
   <tank n="1">
    <tank-num type="int">1</tank-num>
   </tank>
   <tank n="2">
    <tank-num type="int">2</tank-num>
   </tank>
  </fuel>
 </consumables>

 <nasal>
  <YF23>
   <script><![CDATA[

    autotakeoff = func {
      if(getprop("/autopilot/locks/auto-take-off") != "Enabled") {
        print("Auto Take-Off disabled");
      } else {
        settimer(autotakeoff, 0.5);
      }
      # If the ground-roll-heading-hold has been reset (<-999) set:
      # Flaps = 0.64
      # speed-with-throttle speed hold
      # take-off pitch hold
      # wing-leveler and rudder heading hold
      if(getprop("/autopilot/settings/ground-roll-heading-deg") < -999) {
        hdgdeg = getprop("/orientation/heading-deg");
        setprop("/autopilot/settings/ground-roll-heading-deg", hdgdeg);
        setprop("/autopilot/settings/true-heading-deg", hdgdeg);
        setprop("/controls/flight/flaps", 0.64);
        setprop("/autopilot/locks/speed", "speed-with-throttle");
        setprop("/autopilot/locks/altitude", "take-off");
        setprop("/autopilot/locks/heading", "wing-leveler");
        setprop("/autopilot/locks/rudder-control", "rudder-hold");
      }
      # Get the airspeed & agl.
      airspeed = getprop("/velocities/airspeed-kt");
      agl = getprop("/position/altitude-agl-ft");
      # Once above 50ft agl, engage climb-out Pitch-Hold, retract the U/C,
      # engage Heading-Hold and retract flaps to 0.48.
      if(agl > 50) {
        setprop("/autopilot/locks/altitude", "climb-out");
        setprop("/controls/gear/gear-down", "false");
        setprop("/autopilot/locks/rudder-control", "reset");
        interpolate("/controls/flight/rudder", 0, 10);
        if(getprop("/controls/flight/flaps") >= 0.64) {
          interpolate("/controls/flight/flaps", 0.48, 2);
        }
      }
      # Set flaps depending on speed.
      if(airspeed < 150) {
        # Change nothing.
      } else {
        if(airspeed < 160) {
          interpolate("/controls/flight/flaps", 0.32, 2);
        } else {
          if(airspeed < 170) {
            interpolate("/controls/flight/flaps", 0.16, 2);
          } else {
            if(airspeed < 180) {
              interpolate("/controls/flight/flaps", 0.08, 2);
            } else {
              # Switch to true-heading-hold,
              # complete Flap retraction, switch to Mach-Hold throttle
              # mode, mach-hold-climb mode and disable Take-Off mode.
              setprop("/autopilot/locks/heading", "true-heading-hold");
              interpolate("/controls/flight/flaps", 0, 2);
              setprop("/autopilot/locks/speed", "mach-with-throttle");
              setprop("/autopilot/locks/altitude", "mach-climb");
              setprop("/autopilot/locks/auto-take-off", "Disabled");
            }
          }
        }
      }
    }

    autoland = func {
      # Re-schedule the next loop if the Landing function is enabled.
      if(getprop("/autopilot/locks/auto-landing") != "Enabled") {
        print("Auto Landing disabled");
      } else {
        settimer(autoland, 0.5);
      }

      # Get the agl, kias, vfps & heading.
      agl = getprop("/position/altitude-agl-ft");
      kias = getprop("/velocities/airspeed-kt");
      vfps = getprop("/velocities/vertical-speed-fps");
      hdgdeg = getprop("/orientation/heading-deg");
      if(getprop("/autopilot/settings/target-speed-kt") > 270) {
        setprop("/autopilot/settings/target-speed-kt", 270);
      }
      if(getprop("/autopilot/locks/heading") != "nav1-hold") {
        setprop("/autopilot/locks/heading", "nav1-hold");
      }

      # Depending on alt...
      # Glide Slope Phase
      if(agl > 60) {
        setprop("/autopilot/locks/altitude", "Glide Slope");
        if(kias < 155) {
          setprop("/autopilot/locks/approach-AoA-lock", "Engaged");
        } else {
          if(kias < 170) {
            interpolate("/controls/flight/flaps", 1.0, 2);
          } else {
            if(kias < 180) {
              interpolate("/controls/flight/flaps", 0.82, 2);
              interpolate("/controls/flight/spoilers", 0, 2);
              setprop("/controls/gear/gear-down", "true");
            } else {
              if(kias < 190) {
                interpolate("/controls/flight/flaps", 0.64, 2);
              } else {
                if(kias < 200) {
                  interpolate("/controls/flight/flaps", 0.48, 2);
                } else {
                  if(kias < 210) {
                    interpolate("/controls/flight/flaps", 0.32, 2);
                    interpolate("/controls/flight/spoilers", 0.6, 2);
                  } else {
                    if(kias < 220) {
                      interpolate("/controls/flight/flaps", 0.16, 2);
                    } else {
                      if(kias < 230) {
                        interpolate("/controls/flight/flaps", 0.08, 2);
                      } else {
                        if(vfps < -15) {
                          setprop("/autopilot/settings/target-speed-kt", 150);
                          interpolate("/controls/flight/spoilers", 1.0, 4);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        # Touch Down Phase
        setprop("/autopilot/locks/approach-AoA-lock", "Off");
        setprop("/autopilot/locks/altitude", "Touch Down");
        setprop("/autopilot/locks/speed", "Off");
      }
      if(agl < 0.1) {
        # Disable the AP nav1 heading hold, deploy the spoilers and cut the
        # throttles.
        setprop("/autopilot/locks/heading", "Off");
        setprop("/controls/flight/spoilers", 1);
        setprop("/autopilot/locks/heading", "wing-leveler");
        setprop("/controls/engines/engine[0]/throttle", 0);
        setprop("/controls/engines/engine[1]/throttle", 0);
      }
      if(agl < 0.01) {
        # Brakes on, Rudder heading hold on & disable IL mode.
        setprop("/controls/gear/brake-left", 0.4);
        setprop("/controls/gear/brake-left", 0.4);
        setprop("/autopilot/settings/ground-roll-heading-deg", hdgdeg);
        setprop("/autopilot/locks/rudder-control", "rudder-hold");
        setprop("/autopilot/locks/auto-landing", "Disabled");
        setprop("/autopilot/locks/auto-take-off", "Enabled");
        setprop("/autopilot/locks/altitude", "None");
        interpolate("/controls/flight/elevator-trim", 0, 6.0);
      }
    }

   ]]></script>
  </YF23>

 </nasal>

</PropertyList>
